# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Reseplaneraren.Api.Location do
  @moduledoc """
  API calls for all endpoints tagged `Location`.
  """

  alias Reseplaneraren.Connection
  import Reseplaneraren.RequestBuilder


  @doc """
  Returns a list of all stops available in the journey planner.
  Returns a list of all stops available in the journey planner. Be aware that a call of this service is very time consuming and should be only requested when it is really needed.

  ## Parameters

  - connection (Reseplaneraren.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :format (String.t): the required response format
    - :jsonp_callback (String.t): If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name.

  ## Returns

  {:ok, %Reseplaneraren.Model.LocationList{}} on success
  {:error, info} on failure
  """
  @spec get_all_stops(Tesla.Env.client, keyword()) :: {:ok, Reseplaneraren.Model.LocationList.t} | {:error, Tesla.Env.t}
  def get_all_stops(connection, opts \\ []) do
    optional_params = %{
      :"format" => :query,
      :"jsonpCallback" => :query
    }
    %{}
    |> method(:get)
    |> url("/location.allstops")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Reseplaneraren.Model.LocationList{})
  end

  @doc """
  Returns a list of possible matches in the journey planner database
  Performs a pattern matching of a user input to retrieve a list of possible matches in the journey planner database. Possible matches might be stops/stations, points of interest and addresses.

  ## Parameters

  - connection (Reseplaneraren.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :input (String.t): a string with the user input
    - :format (String.t): the required response format
    - :jsonp_callback (String.t): If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name.

  ## Returns

  {:ok, %Reseplaneraren.Model.LocationList{}} on success
  {:error, info} on failure
  """
  @spec get_location_by_name(Tesla.Env.client, keyword()) :: {:ok, Reseplaneraren.Model.LocationList.t} | {:error, Tesla.Env.t}
  def get_location_by_name(connection, opts \\ []) do
    optional_params = %{
      :"input" => :query,
      :"format" => :query,
      :"jsonpCallback" => :query
    }
    %{}
    |> method(:get)
    |> url("/location.name")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Reseplaneraren.Model.LocationList{})
  end

  @doc """
  Returns the address nearest a given coordinate.
  

  ## Parameters

  - connection (Reseplaneraren.Connection): Connection to server
  - origin_coord_lat (float()): latitude of coordinate in the WGS84 system
  - origin_coord_long (float()): longitude of coordinate in the WGS84 system
  - opts (KeywordList): [optional] Optional parameters
    - :format (String.t): the required response format
    - :jsonp_callback (String.t): If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name.

  ## Returns

  {:ok, %Reseplaneraren.Model.LocationList{}} on success
  {:error, info} on failure
  """
  @spec get_nearby_address(Tesla.Env.client, float(), float(), keyword()) :: {:ok, Reseplaneraren.Model.LocationList.t} | {:error, Tesla.Env.t}
  def get_nearby_address(connection, origin_coord_lat, origin_coord_long, opts \\ []) do
    optional_params = %{
      :"format" => :query,
      :"jsonpCallback" => :query
    }
    %{}
    |> method(:get)
    |> url("/location.nearbyaddress")
    |> add_param(:query, :"originCoordLat", origin_coord_lat)
    |> add_param(:query, :"originCoordLong", origin_coord_long)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Reseplaneraren.Model.LocationList{})
  end

  @doc """
  Returns a list of stops around a given center coordinate.
  Returns a list of stops around a given center coordinate. The returned results are ordered by their distance to the center coordinate.

  ## Parameters

  - connection (Reseplaneraren.Connection): Connection to server
  - origin_coord_lat (float()): latitude of center coordinate in the WGS84 system
  - origin_coord_long (float()): longitude of center coordinate in the WGS84 system
  - opts (KeywordList): [optional] Optional parameters
    - :max_no (integer()): maximum number of returned stops
    - :max_dist (integer()): maximum distance from the center coordinate
    - :format (String.t): the required response format
    - :jsonp_callback (String.t): If JSONP response format is needed, you can append an additional parameter to specify the name of a callback function, and the JSON object will be wrapped by a function call with this name.

  ## Returns

  {:ok, %Reseplaneraren.Model.LocationList{}} on success
  {:error, info} on failure
  """
  @spec get_nearby_stops(Tesla.Env.client, float(), float(), keyword()) :: {:ok, Reseplaneraren.Model.LocationList.t} | {:error, Tesla.Env.t}
  def get_nearby_stops(connection, origin_coord_lat, origin_coord_long, opts \\ []) do
    optional_params = %{
      :"maxNo" => :query,
      :"maxDist" => :query,
      :"format" => :query,
      :"jsonpCallback" => :query
    }
    %{}
    |> method(:get)
    |> url("/location.nearbystops")
    |> add_param(:query, :"originCoordLat", origin_coord_lat)
    |> add_param(:query, :"originCoordLong", origin_coord_long)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%Reseplaneraren.Model.LocationList{})
  end
end
